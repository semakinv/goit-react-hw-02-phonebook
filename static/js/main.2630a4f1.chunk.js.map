{"version":3,"sources":["components/ContactForm.module.css","components/App.module.css","components/ContactForm.js","components/Filter.js","components/ContactListItem.js","components/ContactList.js","components/App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleInputCange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","className","inputForm","onSubmit","this","required","type","onChange","placeholder","pattern","Component","Filter","onChangeFilter","ContactListItem","onRemove","onClick","ContactList","contacts","onRemoveContact","map","id","key","App","filter","addContact","contact","uuidv4","inputedName","some","element","alert","prevState","changeFilter","getVisibleContacts","toLowerCase","includes","removeContact","ContactId","length","visibleContacts","shell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2630a4f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"ContactForm_inputForm__3PADU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shell\":\"App_shell__32fbI\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { inputForm } from './ContactForm.module.css';\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleInputCange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAddContact(this.state.name, this.state.number);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <form className={inputForm} onSubmit={this.handleSubmit}>\n          <label>\n            {' '}\n            <p>Name</p>\n            <input\n              required\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleInputCange}\n              name=\"name\"\n            />\n          </label>\n          <label>\n            {' '}\n            <p>Number</p>\n            <input\n              required\n              placeholder=\"(097)111-11-11\"\n              pattern=\"[0-9 + -/(/)]+\"\n              type=\"text\"\n              value={this.state.number}\n              onChange={this.handleInputCange}\n              name=\"number\"\n            />\n          </label>\n          <section>\n            <button type=\"submit\">Add contact</button>\n          </section>\n        </form>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className=\"TaskEditor-input\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.elementType.isRequired,\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst ContactListItem = ({ name, number, onRemove }) => {\r\n  return (\r\n    <li>\r\n      <p>\r\n        {name}: {number}{' '}\r\n        <button type=\"button\" onClick={onRemove}>\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.elementType.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\nimport ContactListItem from './ContactListItem';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <ContactListItem\n        key={id}\n        name={name}\n        number={number}\n        onRemove={() => onRemoveContact(id)}\n      />\n    ))}\n  </ul>\n);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemoveContact: PropTypes.elementType.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactList from './ContactList';\nimport { shell } from './App.module.css';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    const inputedName = contact.name;\n    if (\n      this.state.contacts.some(element => {\n        return element.name === inputedName;\n      })\n    ) {\n      return alert(`${inputedName} is alredy in contacts.`);\n    } else {\n      this.setState(prevState => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    }\n  };\n\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  removeContact = ContactId => {\n    if (\n      this.state.filter.length > 0 &&\n      this.getVisibleContacts().length === 1\n    ) {\n      this.setState(() => {\n        return {\n          filter: '',\n        };\n      });\n    }\n\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== ContactId),\n      };\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div className={shell}>\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n        <h2>Contacts</h2>\n        {this.state.contacts.length > 1 && (\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\n        )}\n\n        {visibleContacts.length > 0 && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemoveContact={this.removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}